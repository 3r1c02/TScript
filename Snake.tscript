
var gwidth = 800;
var gheight = 800;
var rects_x = 40;
var rects_y = 40;
var gamespeed = 10;

class Graphics {
	# Is responsible for the visual representation of the individual tiles
	public:
		var rects = [];
		var rect_color = [];
		var canvas_size_x;
		var canvas_size_y;
		var unit_x;
		var unit_y;
		var cell_count_x;
		var cell_count_y;
		var event_queue = [];
		var border;
		var colors = {"white"  : [1,1,1],
					  "black"  : [0,0,0],
					  "green"  : [0,1,0],
					  "blue"   : [0,0,1], 
					  "red"    : [1,0,0],
				  	  "yellow" : [1,1,0],
					  "magenta": [1,0,1],
					  "orange" : [1,0.5,0],
					  "purple" : [0.5,0,1]
					};
		
		# create the gamewindow
		constructor (width=800, height=800, count_x=10, count_y=10, has_border=true) {
			canvas_size_x = width;
			canvas_size_y = height;
			cell_count_x = count_x;
			cell_count_y = count_y;
			unit_x = (width / count_x);
			unit_y = (height / count_y);
			border = has_border;
				
			for 0:count_x do rects.push([]);
			
			rect_color = deepcopy(rects);
			
			for var col in 0:cell_count_x do {
				for var row in 0:cell_count_y do {
					var x = col * unit_x;
					var y = row * unit_y;
					canvas.setFillColor(colors["white"][0],colors["white"][1],colors["white"][2]);
					canvas.setLineColor(0,0,0);
					var ext_x = x + unit_x;
					if has_border
					then canvas.frameRect(x, y, unit_x, unit_y);
					else canvas.fillRect(x, y, unit_x, unit_y);
					rects[col].push([x, y]);
					rect_color[col].push("white");
				}
			}
			
		}
		
		# check if a tile exists in the gamewindow
		function validate_cell(x, y) {
			if x >=0 and x < cell_count_x and y >= 0 and y < cell_count_y
			then return;
			
			var message = [];
			if x < 0 then message.push("x ist zu klein (" + x + " < 0)");
			else if x >= cell_count_x then message.push("x ist zu groß (" + x + " > " + cell_count_x + ")");
			if y < 0 then message.push("y ist zu klein (" + y + " < 0)");
			else if y >= cell_count_y then message.push("y ist zu groß (" + y + " > " + cell_count_y + ")");
			
			error(message);
		}
		
		# change the color of a specific tile
		function set_color(x, y, color="white") {
			validate_cell(x, y);
			canvas.setFillColor(colors[color][0],colors[color][1],colors[color][2]);
			if border
				then canvas.frameRect(rects[x][y][0], rects[x][y][1], unit_x, unit_y);
				else canvas.fillRect(rects[x][y][0], rects[x][y][1], unit_x, unit_y);
			rect_color[x][y] = color;
		}
		
		# reset the color of all tiles
		function clear(color="white"){
			for var col in 0:cell_count_x do {
				for var row in 0:cell_count_y do {
					canvas.setFillColor(colors[color][0],colors[color][1],colors[color][2]);					
					if border
						then canvas.frameRect(rects[col][row][0], rects[col][row][1], unit_x, unit_y);
						else canvas.fillRect(rects[col][row][0], rects[col][row][1], unit_x, unit_y);
					rect_color[col][row] = "white";
				}
			}
		}
		
		# return the color of a specific tile (not used in this game)
		function get_color(x, y) {
			return rect_color[x][y];
		}
		
		# draw a 'X' in a cell
		function draw_x(x, y, margin="0", color="black") {
			canvas.setFillColor(colors[color][0],colors[color][1],colors[color][2]);
			canvas.line(rects[x][y][0] + margin, rects[x][y][1] + margin, rects[x][y][0] + unit_x - margin, rects[x][y][1] + unit_y - margin);
			canvas.line(rects[x][y][0] + unit_x - margin, rects[x][y][1] + margin, rects[x][y][0] + margin, rects[x][y][1] + unit_y - margin);
		}
}


var points = 0;				# How high can you get this number? Call me if it's more than 2,147,483,647
var snake = [[0,0],[1,0]];	# Coordinates of the body of your snake
var direction = "r";		# The direction the snake is heading
var new_direction = "r";			# The direction you want to change to
var tick = 0; 				# the tick counter of the game
var newC = true;			# should a new cherry be spawned?
var cherry = [];			# coordinates of the cherry
var dead = false;

var g = Graphics(gwidth, gheight, rects_x, rects_y);

# function to generate a new cherry
function newCherry() {
	cherry = [];
	cherry.push(Integer(rects_x * math.random()));
	cherry.push(Integer(rects_y * math.random()));
	g.set_color(cherry[0],cherry[1], "red");
	newC = false;
}

# Change direction when a key is pressed
function onKeyDown(event) {
	if event.key == "ArrowDown" and not direction == "u" then new_direction = "d";
	else if event.key == "ArrowUp" and not direction == "d" then new_direction = "u";
	else if event.key == "ArrowRight" and not direction == "l" then new_direction = "r";
	else if event.key == "ArrowLeft" and not direction == "r" then new_direction = "l";
}

function onTick(event) {
	tick += 1;
	if tick % gamespeed == 0 then {
		tick = 0;
		
		direction = new_direction;
		
		# Move the snake
		var head = snake[snake.size()-1];
		if direction == "r" then snake.push([head[0]+1,head[1]]);
		else if direction == "l" then snake.push([head[0]-1,head[1]]);
		else if direction == "d" then snake.push([head[0],head[1]+1]);
		else if direction == "u" then snake.push([head[0],head[1]-1]);
		head = snake[snake.size()-1];
		
		# Check if you collected a cherry
		if head == cherry then {
			newC = true;
			points += 1;
		}
		
		# Check if you've hit yourself
		for var i in 0:snake.size()-1 do {
			if snake[i] == head then quitEventMode();
		}
		
		# Border-collision test
		if head[0] < 0 or head[0] > rects_x-1 or head[1] < 0 or head[1] > rects_y-1 then {quitEventMode(); dead = true;}
		
		if not dead then {
		
			if not newC then{
			g.set_color(snake[0][0],snake[0][1]);
			snake.remove(0:1);
			}
			else newCherry();

			g.set_color(head[0],head[1], "green");
		}
	}
}


setEventHandler("canvas.keydown", onKeyDown);
setEventHandler("timer", onTick);

enterEventMode();

{
	use namespace canvas;
	setFillColor(0, 0, 0, 0.5);
	fillRect(0,0,gwidth, gheight);
	setTextAlign("center");
	setFont("Helvetica", gwidth/10);
	setFillColor(1,0,0);
	text(gwidth*0.5, gheight*0.4, "GAME OVER!\n\n" + points + " points");
}
print(points + " points!");
